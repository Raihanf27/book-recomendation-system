# -*- coding: utf-8 -*-
"""recomendationsystem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NhM69XopptEjgVpDxjCNjCeJek19zJl9

Import Library yang dibutuhkan
"""

# Import library
import pandas as pd
import numpy as np
from zipfile import ZipFile
from pathlib import Path
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import zipfile
import os

"""Mengambil data dari drive"""

from google.colab import drive
drive.mount('/content/drive')

"""Membaca data pada format csv"""

book = pd.read_csv('/content/drive/MyDrive/buku/Books.csv')
ratings = pd.read_csv('/content/drive/MyDrive/buku/Ratings.csv')
user = pd.read_csv('/content/drive/MyDrive/buku/Users.csv')

"""# Univariate Exploratory Data Analysis

## Variable buku

Membaca Informasi DataFrame buku
"""

book.info()

"""Mengambil 5 data awal DataFrame buku"""

book.head()

"""## Variable ratings

Membaca Informasi DataFrame ratings
"""

ratings.info()

"""Mengambil 5 DataFrame awal ratings"""

ratings.head()

"""Melihat statistik deskriptif ratings"""

ratings.describe()

"""Menhitung Jumlah unik dari User ID dan Buku, dan total jumlah data rating dari DataFrame ratings"""

print('Jumlah userID: ', len(ratings['User-ID'].unique()))
print('Jumlah Buku: ', len(ratings.ISBN.unique()))
print('Jumlah data rating: ', len(ratings))

"""## Variable User

Membaca Informasi DataFrame user
"""

user.info()

"""Mengambil 5 DataFrame awal user"""

user.head()

"""Melihat statistik deskriptif ratings"""

user.describe()

"""# Data Preprocessing

Menggabungkan dua DataFrame ratings dan book bedasarkan kolom ISBN
"""

merge1 = pd.merge(ratings, book, on='ISBN')
merge1.head()

"""Menggabungkan DataFrame merge1 dan user bedasarkan kolom User-ID"""

merge2 = pd.merge(merge1, user, on='User-ID')
merge2.head()

"""## Data Preparation

Membuang kolom yang tidak dipakai pada DataFrame merge2
"""

merge2.drop(['Image-URL-S', 'Image-URL-M', 'Image-URL-L', 'Year-Of-Publication', 'Location', 'Age'], axis=1, inplace=True)
merge2.head()

"""Memeriksa Null pada DataFrame merge2"""

merge2.isna().sum()

"""Membuang data yang null pada DataFrame merge2"""

merge2.dropna(inplace=True)

"""Membuang DataFrame yang Book-Ratingnya kurang dari 0 dan memeriksa statistik nya"""

# Membuang DataFrame yang Book-Rating kurang dari 0
merge2=merge2[merge2["Book-Rating"]>0]

# Memeriksa statistik deskriptif Book-Rating
merge2["Book-Rating"].describe()

"""Menghitung jumlah User Unik"""

merge2["User-ID"].nunique()

"""Menghitung jumlah ISBN Unik"""

merge2["ISBN"].nunique()

"""Menghitung jumlah Judul buku Unik"""

merge2["Book-Title"].nunique()

"""Membuat salinan dari DataFrame merge2 dan menyimpannya dalam variabel preparation. Kemudian, preparation.sort_values('ISBN') mengurutkan DataFrame berdasarkan kolom ISBN."""

preparation = merge2
preparation.sort_values('ISBN')

"""Kode dibawah berfungsi untuk membuat kolom baru bernama Features di DataFrame preparation. Kolom ini adalah hasil penggabungan kolom Book-Title, Book-Author, dan Publisher yang dipisahkan oleh koma."""

# Membuat kolom 'Features' dengan menggabungkan kolom 'Book-Title', 'Book-Author', dan 'Publisher' dipisahkan oleh koma
preparation['Features'] = preparation[['Book-Title', 'Book-Author', 'Publisher']].agg(', '.join, axis=1)

preparation.head()

"""Menghapus row yang valuenya NaN pada kolom Features"""

preparation.dropna(subset=['Features'], inplace=True)

"""Membuat nilai pada kolom Features menjadi huruf kecil semua"""

preparation['Features'] = preparation['Features'].astype(str).str.lower()
preparation

"""Memeriksa Nilai duplicate yang ada di kolom Book-Title"""

preparation['Book-Title'].value_counts()

"""Menghapus data duplicate yang ada dikolom Book-Title"""

preparation.drop_duplicates(subset='Book-Title', keep='first', inplace=True)

"""Mengambil 5 data awal data preparation"""

preparation.head()

"""mengonversi kolom ISBN, Book-Title, dan Features dari DataFrame preparation menjadi daftar (list) dan mencetak length masing-masing daftar."""

ISBN = preparation['ISBN'].tolist()
Book_Title = preparation['Book-Title'].tolist()
Book_Features = preparation['Features'].tolist()

print(len(ISBN))
print(len(Book_Title))
print(len(Book_Features))

"""Membatasi jumlah data dalam daftar ISBN, Book_Title, dan Book_Features menjadi maksimal 10.000 data"""

ISBN = ISBN[:10000]
Book_Title = Book_Title[:10000]
Book_Features = Book_Features[:10000]

print(len(ISBN))
print(len(Book_Title))
print(len(Book_Features))

"""Membuat dictionary untuk menentukan pasangan key-value pada data ISBN, Book_Title, dan Book_Title"""

book_new = pd.DataFrame({
    'ISBN': ISBN,
    'Book_Title': Book_Title,
    'Book_Features': Book_Features
})
book_new

"""## Modelling Content Based Filter

Mengambil 5 sample acak dari DataFrame data
"""

data = book_new
data.sample(5)

"""Mengekstraksi fitur dari teks dalam kolom Book_Features dan mendapatkan nama-nama fitur (kata-kata) yang dihasilkan oleh vektorisasi"""

from sklearn.feature_extraction.text import TfidfVectorizer

tf = TfidfVectorizer()
tf.fit(data['Book_Features'])
tf.get_feature_names_out()

"""Melakukan transformasi teks pada kolom Book_Features menggunakan TfidfVectorizer dan kemudian memeriksa bentuk (shape) dari matriks TF-IDF yang dihasilkan"""

tfidf_matrix = tf.fit_transform(data['Book_Features'])
tfidf_matrix.shape

"""menghasilkan vektor TF-IDF dalam bentuk matriks, menggunakan fungsi todense()"""

tfidf_matrix.todense()

"""Membuat DataFrame dari matriks TF-IDF, dengan kolom sebagai nama fitur (kata-kata) dan baris sebagai judul buku dari DataFrame data. Kemudian, akan menampilkan sampel acak dari 10 baris dan 22 kolom"""

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=data['Book_Title']
).sample(22, axis=1).sample(10, axis=0)

"""Menghitung cosine antara dokumen dalam matriks TF-IDF menggunakan cosine_similarity dari sklearn.metrics.pairwise. Kemiripan cosine mengukur seberapa mirip dua dokumen berdasarkan fitur teks mereka."""

from sklearn.metrics.pairwise import cosine_similarity

cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

"""Membuat DataFrame dari matriks cosine similarity dan menampilkan sampel acak dari 10 baris dan 5 kolom dari DataFrame tersebut

---


"""

cosine_sim_df = pd.DataFrame(cosine_sim, index=data['Book_Title'], columns=data['Book_Title'])
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(5, axis=1).sample(10, axis=0)

"""Memberikan rekomendasi buku berdasarkan kemiripan dengan buku yang diberikan."""

def book_recommendations(book_title, similarity_data=cosine_sim_df, items=data[['ISBN', 'Book_Title', 'Book_Features']], k=5):
    """
    Memberikan rekomendasi buku berdasarkan kemiripan dengan buku yang diberikan.

    Parameter:
    ---
    book_title : str
        Judul buku yang digunakan untuk mencari rekomendasi.
    similarity_data : pd.DataFrame
        DataFrame yang berisi kemiripan kosinus antara buku-buku.
    items : pd.DataFrame
        DataFrame yang berisi informasi buku (ISBN, judul buku).
    k : int
        Jumlah rekomendasi yang diinginkan.
    ---

    Return:
    pd.DataFrame
        DataFrame yang berisi k buku yang paling mirip dengan buku yang diberikan.
    """

    # Mengambil indeks dari k kemiripan tertinggi
    index = similarity_data.loc[:,book_title].to_numpy().argpartition(
        range(-1, -k, -1))

    # Mendapatkan judul buku yang paling mirip
    closest = similarity_data.columns[index[-1:-(k+2):-1]]

    # Menghapus buku yang dicari dari hasil rekomendasi
    closest = closest.drop(book_title, errors='ignore')

    # Menggabungkan dengan informasi buku dan mengembalikan k rekomendasi teratas
    return pd.DataFrame(closest).merge(items).head(k)

"""Menampilkan rekomendasi buku"""

book_recommendations("Harry Potter and the Sorcerer's Stone (Book 1)")

"""## Evaluasi

Menggunakan nilai cosine similarity langsung sebagai kategori dalam ground truth.
"""

# Menggunakan nilai cosine similarity langsung sebagai kategori
ground_truth = cosine_sim

# Menampilkan beberapa nilai pada matriks ground truth
ground_truth_df = pd.DataFrame(ground_truth, index=data['Book_Features'], columns=data['Book_Features']).sample(5, axis=1).sample(10, axis=0)

"""Melakukan evaluasi terhadap model sistem rekomendasi menggunakan metrik presisi dan recall."""

from sklearn.metrics import precision_score, recall_score

# Mengambil sebagian kecil dari matriks cosine similarity dan matriks ground truth
sample_size = 5000
cosine_sim_sample = cosine_sim[:sample_size, :sample_size]
ground_truth_sample = ground_truth[:sample_size, :sample_size]

# Mengonversi matriks cosine similarity menjadi array satu dimensi untuk perbandingan
cosine_sim_flat = cosine_sim_sample.flatten()

# Mengonversi matriks ground truth menjadi array satu dimensi
ground_truth_flat = ground_truth_sample.flatten()

# Menghitung prediksi berdasarkan threshold
prediksi = (cosine_sim_flat >= threshold).astype(int)

# Menghitung metrik presisi dan recall
precision = precision_score(ground_truth_flat, prediksi, zero_division=1)
recall = recall_score(ground_truth_flat, prediksi, zero_division=1)

print("Precision:", precision)
print("Recall:", recall)